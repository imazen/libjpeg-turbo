/*
 * joclidct.h
 *
 * Copyright (C) 2012-2013, MulticoreWare Inc.
 * In July 2013, Written by Peixuan Zhang <zhangpeixuan.cn@gmail.com>
 * The OpenCL kernel code is written by
 *   Chunli  Zhang <chunli@multicorewareinc.com> and
 *   Peixuan Zhang <peixuan@multicorewareinc.com>
 * Based on the OpenCL extension for IJG JPEG library,
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the kernels of OpenCL decoding.
 */

static const char     * jocldec_cl_source1  =
"#define DESCALE(x,n) ((x) >> n)                                          \n"
"__kernel void IDCT_FAST_SHORT     (__global   short8 *src,               \n"
"                                   __global   uchar8 *dst,               \n"
"                                   __constant short8 *quant_tables,      \n"
"                                   __local    short  *inter,             \n"
"                                   const      uint    block_offset)      \n"
"{                                                                        \n"
"  uint   globalIdx = get_global_id(0);                                   \n"
"  uint   localIdx  = get_local_id (0);                                   \n"
"  uint   unitIdx   = localIdx  & 0x07; // MOD 8                          \n"
"  uint   blockIdx  = unitIdx + ((localIdx >> 3) << 6);                   \n"
"  uint   quantbIdx =                                                     \n"
"    ((block_offset - 3) < ((globalIdx >>3) % block_offset)) << 3;        \n"
"  short8 dataShort;                                                      \n"
"  uchar8 dataUchar;                                                      \n"
"  short  tmp0 , tmp1 , tmp2 , tmp3 , tmp4, tmp5, tmp6, tmp7;             \n"
"  short  tmp10, tmp11, tmp12, tmp13, z5  , z10 , z11 , z12 , z13;        \n"
"                                                                         \n"
"  dataShort = src[globalIdx] * quant_tables[quantbIdx + unitIdx];        \n"
"                                                                         \n"
"  if (dataShort.s1 == 0 && dataShort.s2 == 0 && dataShort.s3 == 0 &&     \n"
"      dataShort.s4 == 0 && dataShort.s5 == 0 && dataShort.s6 == 0 &&     \n"
"      dataShort.s7 == 0)                                                 \n"
"    inter[blockIdx +  0] = inter[blockIdx +  8] = inter[blockIdx + 16] = \n"
"    inter[blockIdx + 24] = inter[blockIdx + 32] = inter[blockIdx + 40] = \n"
"    inter[blockIdx + 48] = inter[blockIdx + 56] = dataShort.s0;          \n"
"  else                                                                   \n"
"  {                                                                      \n"
"    tmp10 = dataShort.s0  + dataShort.s4;                                \n"
"    tmp11 = dataShort.s0  - dataShort.s4;                                \n"
"    tmp13 = dataShort.s2  + dataShort.s6;                                \n"
"    tmp12 = DESCALE((dataShort.s2 - dataShort.s6) * 362, 8) - tmp13;     \n"
"    tmp0  = tmp10 + tmp13;                                               \n"
"    tmp3  = tmp10 - tmp13;                                               \n"
"    tmp1  = tmp11 + tmp12;                                               \n"
"    tmp2  = tmp11 - tmp12;                                               \n"
"    z13   = dataShort.s5  + dataShort.s3;                                \n"
"    z10   = dataShort.s5  - dataShort.s3;                                \n"
"    z11   = dataShort.s1  + dataShort.s7;                                \n"
"    z12   = dataShort.s1  - dataShort.s7;                                \n"
"    tmp7  = z11   + z13;                                                 \n"
"    tmp11 = DESCALE((z11 - z13) * 362, 8);                               \n"
"    z5    = DESCALE((z10 + z12) * 473, 8);                               \n"
"    tmp10 = DESCALE(z12 * 277, 8) - z5;                                  \n"
"    tmp12 = DESCALE(-z10 * 669, 8)+ z5;                                  \n"
"    tmp6  = tmp12 - tmp7;                                                \n"
"    tmp5  = tmp11 - tmp6;                                                \n"
"    tmp4  = tmp10 + tmp5;                                                \n"
"                                                                         \n"
"    inter[blockIdx +  0] = tmp0 + tmp7;                                  \n"
"    inter[blockIdx +  8] = tmp1 + tmp6;                                  \n"
"    inter[blockIdx + 16] = tmp2 + tmp5;                                  \n"
"    inter[blockIdx + 24] = tmp3 - tmp4;                                  \n"
"    inter[blockIdx + 32] = tmp3 + tmp4;                                  \n"
"    inter[blockIdx + 40] = tmp2 - tmp5;                                  \n"
"    inter[blockIdx + 48] = tmp1 - tmp6;                                  \n"
"    inter[blockIdx + 56] = tmp0 - tmp7;                                  \n"
"  }                                                                      \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  dataShort = vload8(localIdx, inter);                                   \n"
"                                                                         \n"
"  if (dataShort.s1 == 0 && dataShort.s2 == 0 && dataShort.s3 == 0 &&     \n"
"      dataShort.s4 == 0 && dataShort.s5 == 0 && dataShort.s6 == 0 &&     \n"
"      dataShort.s7 == 0)                                                 \n"
"    dataUchar = convert_uchar_sat((dataShort.s0 >> 5) + 128);            \n"
"  else                                                                   \n"
"  {                                                                      \n"
"    tmp10 = dataShort.s0 + dataShort.s4;                                 \n"
"    tmp11 = dataShort.s0 - dataShort.s4;                                 \n"
"    tmp13 = dataShort.s2 + dataShort.s6;                                 \n"
"    tmp12 = DESCALE((dataShort.s2 - dataShort.s6) * 362, 8) - tmp13;     \n"
"    z13   = dataShort.s5 + dataShort.s3;                                 \n"
"    z10   = dataShort.s5 - dataShort.s3;                                 \n"
"    z11   = dataShort.s1 + dataShort.s7;                                 \n"
"    z12   = dataShort.s1 - dataShort.s7;                                 \n"
"    tmp0  = tmp10 + tmp13;                                               \n"
"    tmp3  = tmp10 - tmp13;                                               \n"
"    tmp1  = tmp11 + tmp12;                                               \n"
"    tmp2  = tmp11 - tmp12;                                               \n"
"    tmp7  = z11 + z13;                                                   \n"
"    tmp11 = DESCALE((z11 - z13) * 362, 8);                               \n"
"    z5    = DESCALE((z10 + z12) * 473, 8);                               \n"
"    tmp10 = DESCALE(z12 * 277, 8) - z5;                                  \n"
"    tmp12 = DESCALE(-z10 * 669, 8) + z5;                                 \n"
"    tmp6  = tmp12 - tmp7;                                                \n"
"    tmp5  = tmp11 - tmp6;                                                \n"
"    tmp4  = tmp10 + tmp5;                                                \n"
"                                                                         \n"
"    dataShort.s0 = (tmp0 + tmp7) >>5;                                    \n"
"    dataShort.s7 = (tmp0 - tmp7) >>5;                                    \n"
"    dataShort.s1 = (tmp1 + tmp6) >>5;                                    \n"
"    dataShort.s6 = (tmp1 - tmp6) >>5;                                    \n"
"    dataShort.s2 = (tmp2 + tmp5) >>5;                                    \n"
"    dataShort.s5 = (tmp2 - tmp5) >>5;                                    \n"
"    dataShort.s4 = (tmp3 + tmp4) >>5;                                    \n"
"    dataShort.s3 = (tmp3 - tmp4) >>5;                                    \n"
"    dataShort    = dataShort + (short)128;                               \n"
"    dataUchar    = convert_uchar8_sat(dataShort);                        \n"
"  }                                                                      \n"
"  dst[globalIdx] = dataUchar;                                            \n"
"}                                                                        \n"
"__kernel void IDCT_SLOW_INT       (__global   short8 *src,               \n"
"                                   __global   uchar8 *dst,               \n"
"                                   __constant int8   *quant_tables,      \n"
"                                   __local    int    *inter,             \n"
"                                   const      uint    block_offset)      \n"
"{                                                                        \n"
"  uint   globalIdx = get_global_id(0);                                   \n"
"  uint   localIdx  = get_local_id (0);                                   \n"
"  uint   unitIdx   = localIdx  & 0x07; // MOD 8                          \n"
"  uint   blockIdx  = unitIdx + ((localIdx >> 3) << 6);                   \n"
"  uint   quantbIdx =                                                     \n"
"    ((block_offset - 3) < ((globalIdx >>3) % block_offset)) << 3;        \n"
"  int8   dataInt;                                                        \n"
"  uchar8 dataUchar;                                                      \n"
"  int    tmp0 , tmp1 , tmp2 , tmp3 ;                                     \n"
"  int    tmp10, tmp11, tmp12, tmp13;                                     \n"
"  int    z1, z2, z3, z4, z5;                                             \n"
"                                                                         \n"
"  dataInt = convert_int8(src[globalIdx]) *                               \n"
"    quant_tables[quantbIdx + unitIdx];                                   \n"
"                                                                         \n"
"  if (dataInt.s1 == 0 && dataInt.s2 == 0 && dataInt.s3 == 0 &&           \n"
"      dataInt.s4 == 0 && dataInt.s5 == 0 && dataInt.s6 == 0 &&           \n"
"      dataInt.s7 == 0)                                                   \n"
"    inter[blockIdx +  0] = inter[blockIdx +  8] = inter[blockIdx + 16] = \n"
"    inter[blockIdx + 24] = inter[blockIdx + 32] = inter[blockIdx + 40] = \n"
"    inter[blockIdx + 48] = inter[blockIdx + 56] = dataInt.s0 * 4;        \n"
"  else                                                                   \n"
"  {                                                                      \n"
"    z1    = (dataInt.s2 + dataInt.s6) * 4433;                            \n"
"    tmp2  = z1 - dataInt.s6 * 15137;                                     \n"
"    tmp3  = z1 + dataInt.s2 * 6270;                                      \n"
"    tmp0  = (dataInt.s0 + dataInt.s4)<<13;                               \n"
"    tmp1  = (dataInt.s0 - dataInt.s4)<<13;                               \n"
"    tmp10 = tmp0 + tmp3;                                                 \n"
"    tmp13 = tmp0 - tmp3;                                                 \n"
"    tmp11 = tmp1 + tmp2;                                                 \n"
"    tmp12 = tmp1 - tmp2;                                                 \n"
"    z1    = dataInt.s7 + dataInt.s1;                                     \n"
"    z2    = dataInt.s5 + dataInt.s3;                                     \n"
"    z3    = dataInt.s7 + dataInt.s3;                                     \n"
"    z4    = dataInt.s5 + dataInt.s1;                                     \n"
"    z5    = (z3 + z4) * 9633;                                            \n"
"                                                                         \n"
"    tmp0  = dataInt.s7 * 2446;                                           \n"
"    tmp1  = dataInt.s5 * 16819;                                          \n"
"    tmp2  = dataInt.s3 * 25172;                                          \n"
"    tmp3  = dataInt.s1 * 12299;                                          \n"
"                                                                         \n"
"    z1    = -z1 * 7373;                                                  \n"
"    z2    = -z2 * 20995;                                                 \n"
"    z3    = -z3 * 16069 + z5;                                            \n"
"    z4    = -z4 * 3196  + z5;                                            \n"
"                                                                         \n"
"    tmp0 += z1 + z3;                                                     \n"
"    tmp1 += z2 + z4;                                                     \n"
"    tmp2 += z2 + z3;                                                     \n"
"    tmp3 += z1 + z4;                                                     \n"
"                                                                         \n"
"    inter[blockIdx +  0] = ((tmp10 + tmp3)+(1<<10))>>11;                 \n"
"    inter[blockIdx + 56] = ((tmp10 - tmp3)+(1<<10))>>11;                 \n"
"    inter[blockIdx +  8] = ((tmp11 + tmp2)+(1<<10))>>11;                 \n"
"    inter[blockIdx + 48] = ((tmp11 - tmp2)+(1<<10))>>11;                 \n"
"    inter[blockIdx + 16] = ((tmp12 + tmp1)+(1<<10))>>11;                 \n"
"    inter[blockIdx + 40] = ((tmp12 - tmp1)+(1<<10))>>11;                 \n"
"    inter[blockIdx + 24] = ((tmp13 + tmp0)+(1<<10))>>11;                 \n"
"    inter[blockIdx + 32] = ((tmp13 - tmp0)+(1<<10))>>11;                 \n"
"  }                                                                      \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  dataInt = vload8(localIdx, inter);                                     \n"
"                                                                         \n"
"  if (dataInt.s1 == 0 && dataInt.s2 == 0 && dataInt.s3 == 0 &&           \n"
"      dataInt.s4 == 0 && dataInt.s5 == 0 && dataInt.s6 == 0 &&           \n"
"      dataInt.s7 == 0) {                                                 \n"
"    dataInt.s0 =  dataInt.s1 = dataInt.s2 = dataInt.s3 =dataInt.s4 =     \n"
"    dataInt.s5 = dataInt.s6 = dataInt.s7 = (dataInt.s0 + 16) >> 5;       \n"
"    dataUchar = convert_uchar8_sat(dataInt + 128);                       \n"
"  }                                                                      \n"
"  else                                                                   \n"
"  {                                                                      \n"
"    z1 = (dataInt.s2 + dataInt.s6) * 4433;                               \n"
"    tmp2 = z1 - dataInt.s6 * 15137;                                      \n"
"    tmp3 = z1 + dataInt.s2 * 6270;                                       \n"
"    tmp0 = (dataInt.s0 + dataInt.s4) << 13;                              \n"
"    tmp1 = (dataInt.s0 - dataInt.s4) << 13;                              \n"
"                                                                         \n"
"    tmp10 = tmp0 + tmp3;                                                 \n"
"    tmp13 = tmp0 - tmp3;                                                 \n"
"    tmp11 = tmp1 + tmp2;                                                 \n"
"    tmp12 = tmp1 - tmp2;                                                 \n"
"                                                                         \n"
"    z1 = dataInt.s7 + dataInt.s1;                                        \n"
"    z2 = dataInt.s5 + dataInt.s3;                                        \n"
"    z3 = dataInt.s7 + dataInt.s3;                                        \n"
"    z4 = dataInt.s5 + dataInt.s1;                                        \n"
"                                                                         \n"
"    z5 = (z3 + z4)* 9633;                                                \n"
"                                                                         \n"
"    tmp0 = dataInt.s7 * 2446;                                            \n"
"    tmp1 = dataInt.s5 * 16819;                                           \n"
"    tmp2 = dataInt.s3 * 25172;                                           \n"
"    tmp3 = dataInt.s1 * 12299;                                           \n"
"                                                                         \n"
"    z1 = -z1 * 7373;                                                     \n"
"    z2 = -z2 * 20995;                                                    \n"
"    z3 = -z3 * 16069 + z5;                                               \n"
"    z4 = -z4 * 3196 + z5;                                                \n"
"                                                                         \n"
"    tmp0 += z1 + z3;                                                     \n"
"    tmp1 += z2 + z4;                                                     \n"
"    tmp2 += z2 + z3;                                                     \n"
"    tmp3 += z1 + z4;                                                     \n"
"                                                                         \n"
"    dataInt.s0 = ((tmp10 + tmp3)+(1<<17))>> 18;                          \n"
"    dataInt.s7 = ((tmp10 - tmp3)+(1<<17))>> 18;                          \n"
"    dataInt.s1 = ((tmp11 + tmp2)+(1<<17))>> 18;                          \n"
"    dataInt.s6 = ((tmp11 - tmp2)+(1<<17))>> 18;                          \n"
"    dataInt.s2 = ((tmp12 + tmp1)+(1<<17))>> 18;                          \n"
"    dataInt.s5 = ((tmp12 - tmp1)+(1<<17))>> 18;                          \n"
"    dataInt.s4 = ((tmp13 - tmp0)+(1<<17))>> 18;                          \n"
"    dataInt.s3 = ((tmp13 + tmp0)+(1<<17))>> 18;                          \n"
"    dataUchar    = convert_uchar8_sat(dataInt + 128);                    \n"
"  }                                                                      \n"
"  dst[globalIdx] = dataUchar;                                            \n"
"}                                                                        \n"
"__kernel void IDCT_FAST_FLOAT     (__global   short8 *src,               \n"
"                                   __global   uchar8 *dst,               \n"
"                                   __constant float8 *quant_tables,      \n"
"                                   __local    float  *inter,             \n"
"                                   const      uint    block_offset)      \n"
"{                                                                        \n"
"  uint   globalIdx = get_global_id(0);                                   \n"
"  uint   localIdx  = get_local_id (0);                                   \n"
"  uint   unitIdx   = localIdx  & 0x07; // MOD 8                          \n"
"  uint   blockIdx  = unitIdx + ((localIdx >> 3) << 6);                   \n"
"  uint   quantbIdx =                                                     \n"
"    ((block_offset - 3) < ((globalIdx >>3) % block_offset)) << 3;        \n"
"  float8 dataFloat;                                                      \n"
"  int8 dataInt;                                                          \n"
"  uchar8 dataUchar;                                                      \n"
"  float  tmp0 , tmp1 , tmp2 , tmp3 , tmp4, tmp5, tmp6, tmp7;             \n"
"  float  tmp10, tmp11, tmp12, tmp13, z5  , z10 , z11 , z12 , z13;        \n"
"                                                                         \n"
"  dataFloat = convert_float8(src[globalIdx]) *                           \n"
"    quant_tables[quantbIdx + unitIdx];                                   \n"
"                                                                         \n"
"  if (dataFloat.s1 == 0 && dataFloat.s2 == 0 && dataFloat.s3 == 0 &&     \n"
"      dataFloat.s4 == 0 && dataFloat.s5 == 0 && dataFloat.s6 == 0 &&     \n"
"      dataFloat.s7 == 0)                                                 \n"
"    inter[blockIdx +  0] = inter[blockIdx +  8] = inter[blockIdx + 16] = \n"
"    inter[blockIdx + 24] = inter[blockIdx + 32] = inter[blockIdx + 40] = \n"
"    inter[blockIdx + 48] = inter[blockIdx + 56] = dataFloat.s0;          \n"
"  else                                                                   \n"
"  {                                                                      \n"
"    tmp10 = dataFloat.s0  + dataFloat.s4;                                \n"
"    tmp11 = dataFloat.s0  - dataFloat.s4;                                \n"
"    tmp13 = dataFloat.s2  + dataFloat.s6;                                \n"
"    tmp12 = (dataFloat.s2 - dataFloat.s6) * 1.414213562f - tmp13;        \n"
"    tmp0  = tmp10 + tmp13;                                               \n"
"    tmp3  = tmp10 - tmp13;                                               \n"
"    tmp1  = tmp11 + tmp12;                                               \n"
"    tmp2  = tmp11 - tmp12;                                               \n"
"    z13   = dataFloat.s5  + dataFloat.s3;                                \n"
"    z10   = dataFloat.s5  - dataFloat.s3;                                \n"
"    z11   = dataFloat.s1  + dataFloat.s7;                                \n"
"    z12   = dataFloat.s1  - dataFloat.s7;                                \n"
"    tmp7  = z11 + z13;                                                   \n"
"    tmp11 = (z11 - z13) * 1.414213562f;                                  \n"
"    z5    = (z10 + z12) * 1.847759065f;                                  \n"
"    tmp10 = z12 * 1.082392200f - z5;                                     \n"
"    tmp12 = -z10 * 2.613125930f + z5;                                    \n"
"    tmp6  = tmp12 - tmp7;                                                \n"
"    tmp5  = tmp11 - tmp6;                                                \n"
"    tmp4  = tmp10 + tmp5;                                                \n"
"                                                                         \n"
"    inter[blockIdx +  0] = tmp0 + tmp7;                                  \n"
"    inter[blockIdx +  8] = tmp1 + tmp6;                                  \n"
"    inter[blockIdx + 16] = tmp2 + tmp5;                                  \n"
"    inter[blockIdx + 24] = tmp3 - tmp4;                                  \n"
"    inter[blockIdx + 32] = tmp3 + tmp4;                                  \n"
"    inter[blockIdx + 40] = tmp2 - tmp5;                                  \n"
"    inter[blockIdx + 48] = tmp1 - tmp6;                                  \n"
"    inter[blockIdx + 56] = tmp0 - tmp7;                                  \n"
"  }                                                                      \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  dataFloat = vload8(localIdx, inter);                                   \n"
"                                                                         \n"
"  tmp10 = dataFloat.s0 + dataFloat.s4;                                   \n"
"  tmp11 = dataFloat.s0 - dataFloat.s4;                                   \n"
"  tmp13 = dataFloat.s2 + dataFloat.s6;                                   \n"
"  tmp12 = (dataFloat.s2 - dataFloat.s6) * 1.414213562f - tmp13;          \n"
"  z13   = dataFloat.s5 + dataFloat.s3;                                   \n"
"  z10   = dataFloat.s5 - dataFloat.s3;                                   \n"
"  z11   = dataFloat.s1 + dataFloat.s7;                                   \n"
"  z12   = dataFloat.s1 - dataFloat.s7;                                   \n"
"  tmp0  = tmp10 + tmp13;                                                 \n"
"  tmp3  = tmp10 - tmp13;                                                 \n"
"  tmp1  = tmp11 + tmp12;                                                 \n"
"  tmp2  = tmp11 - tmp12;                                                 \n"
"  tmp7  = z11 + z13;                                                     \n"
"  tmp11 = (z11 - z13) * 1.414213562f;                                    \n"
"  z5    = (z10 + z12) * 1.847759065f;                                    \n"
"  tmp10 = z12 * 1.082392200f - z5;                                       \n"
"  tmp12 = -z10 * 2.613125930f + z5;                                      \n"
"  tmp6  = tmp12 - tmp7;                                                  \n"
"  tmp5  = tmp11 - tmp6;                                                  \n"
"  tmp4  = tmp10 + tmp5;                                                  \n"
"                                                                         \n"
"  dataFloat.s0 = tmp0 + tmp7;                                            \n"
"  dataFloat.s7 = tmp0 - tmp7;                                            \n"
"  dataFloat.s1 = tmp1 + tmp6;                                            \n"
"  dataFloat.s6 = tmp1 - tmp6;                                            \n"
"  dataFloat.s2 = tmp2 + tmp5;                                            \n"
"  dataFloat.s5 = tmp2 - tmp5;                                            \n"
"  dataFloat.s4 = tmp3 + tmp4;                                            \n"
"  dataFloat.s3 = tmp3 - tmp4;                                            \n"
"  dataInt      = convert_int8_rtz(dataFloat);                            \n"
"  dataInt.s0   = (dataInt.s0 + 4)>>3;                                    \n"
"  dataInt.s1   = (dataInt.s1 + 4)>>3;                                    \n"
"  dataInt.s2   = (dataInt.s2 + 4)>>3;                                    \n"
"  dataInt.s3   = (dataInt.s3 + 4)>>3;                                    \n"
"  dataInt.s4   = (dataInt.s4 + 4)>>3;                                    \n"
"  dataInt.s5   = (dataInt.s5 + 4)>>3;                                    \n"
"  dataInt.s6   = (dataInt.s6 + 4)>>3;                                    \n"
"  dataInt.s7   = (dataInt.s7 + 4)>>3;                                    \n"
"  dataUchar    = convert_uchar8_sat(dataInt + 128);                      \n"
"  dst[globalIdx] = dataUchar;                                            \n"
"}                                                                        \n"
"__kernel void RESET_ZERO    (__global short8 *src)                       \n"
"{                                                                        \n"
"  uint   globalIdx = get_global_id(0);                                   \n"
"  short8 tempIn;                                                         \n"
"  tempIn = 0;                                                            \n"
"  src[globalIdx] = tempIn;                                               \n"
"}                                                                        \n";
